{
  "openapi": "3.0.0",
  "info": {
    "title": "Book Worm API",
    "description": "This API manages library books, tracks loans, and manages user accounts. All users can view books in the system, but only registered patrons can reserve and check them out. Librarians have additional permissions, including adding new books to the system, viewing current loans for all patrons, and managing patron reservations.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://cse341-finalproject-2pzl.onrender.com"
    },
    {
      "url": "http://localhost:3000"
    }
  ],
  "components": {
    "securitySchemes": {},
    "schemas": {
      "User": {
        "type": "object",
        "required": ["UserID", "FirstName", "LastName", "UserType", "MailingAddress"],
        "properties": {
          "UserID": { "type": "number", "example": 10 },
          "FirstName": { "type": "string", "example": "Jane" },
          "LastName": { "type": "string", "example": "Doe" },
          "UserType": { "type": "string", "example": "patron" },
          "MailingAddress": { "type": "string", "example": "345 East Main St." }
        }
      },
      "Book": {
        "type": "object",
        "required": [
          "BookID",
          "Title",
          "Author",
          "ISBN",
          "PublicationYear",
          "Availability",
          "Publisher"
        ],
        "properties": {
          "BookID": { "type": "number", "example": 10 },
          "Title": { "type": "string", "example": "Fahrenheit 451" },
          "Author": { "type": "string", "example": "Ray Bradbury" },
          "ISBN": { "type": "string", "example": "9780006546061" },
          "Genre": { "type": "string", "example": "Science Fiction" },
          "PublicationYear": { "type": "number", "example": 1993 },
          "Availability": { "type": "boolean", "example": "False" },
          "Publisher": { "type": "string", "example": "Harper Collins" }
        }
      },
      "Loan": {
        "type": "object",
        "required": ["LoanID", "BookID", "UserID", "DateOut", "DueDate"],
        "properties": {
          "LoanID": { "type": "number", "example": 10 },
          "BookID": { "type": "number", "example": 1 },
          "UserID": { "type": "number", "example": 1 },
          "DateOut": { "type": "string", "example": "2024-11-04" },
          "DueDate": { "type": "string", "example": "2024-11-25" }
        }
      },
      "Reservation": {
        "type": "object",
        "required": ["ReservationID", "UserID", "BookID", "ReservationDate"],
        "properties": {
          "ReservationID": { "type": "number", "example": 10 },
          "UserID": { "type": "number", "example": 1 },
          "BookID": { "type": "number", "example": 1 },
          "ReservationDate": { "type": "string", "example": "2024-11-25" }
        }
      }
    }
  },
  "paths": {
    "/users/": {
      "get": {
        "description": "Retrieve all users.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Create a new user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "UserID": {
                  "example": "any number"
                },
                "FirstName": {
                  "example": "any"
                },
                "LastName": {
                  "example": "any"
                },
                "UserType": {
                  "example": "staff or patron"
                },
                "MailingAddress": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "description": "Retrieve one user by their id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Must use a valid user id to find a user."
          },
          "404": {
            "description": "Not Found - No user exists with that id."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/update/{userId}": {
  "put": {
    "summary": "Update an existing user",
    "description": "Update the details of the user.",
    "parameters": [
      {
        "name": "userId",
        "in": "path",
        "required": true,
        "description": "The ID of the user to update",
        "schema": {
          "type": "integer"
        }
      }
    ],
    "requestBody": {
      "description": "The updated user object",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/User"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "User updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "400": {
        "description": "Invalid input, object invalid"
      },
      "404": {
        "description": "User not found"
      },
      "500": {
        "description": "Internal server error"
      }
    }
  }
},
    "/users/type/{userType}": {
      "get": {
        "description": "Retrieve all users of the specified user type. Either: patron or staff",
        "parameters": [
          {
            "name": "userType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Must use a valid user type to find users"
          },
          "404": {
            "description": "Not Found - No users exist with that user type"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/login": {
      "get": {
        "summary": "User login",
        "description": "Authenticates a user based on query parameters and returns a session token.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "user@example.com"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "password",
              "example": "password123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid email or password"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "users/logout": {
      "get": {
        "summary": "User logout",
        "description": "Logs out the user by invalidating the current session or token.",
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized - User not logged in"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "user/update":{
      "put": {
        "summary": "Update an existing user",
        "description": "Update hte details of the user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to update",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The updated user object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input, object invalid"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/books": {
      "get": {
        "description": "Retrieve all books with optional filtering by availability or ISBN number.",
        "parameters": [
          {
            "name": "Availability",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [true, false]
            }
          },
          {
            "name": "ISBN",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - List of books matching the filter.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Book" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Create a New Book",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "BookID": {
                  "example": "any number"
                },
                "Title": {
                  "example": "any"
                },
                "Author": {
                  "example": "any"
                },
                "ISBN": {
                  "example": "any please exclude the hyphens"
                },
                "Genre": {
                  "example": "any"
                },
                "PublicationYear": {
                  "example": "any number"
                },
                "Availability": {
                  "example": "true or false"
                },
                "Publisher": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/books/{bookId}": {
      "get": {
        "description": "Retrieve one book by its ID.",
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Book" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Must use a valid book id to find a book."
          },
          "404": {
            "description": "Not Found - No book exists with that id."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/book/update/{bookId}": {
  "put": {
    "summary": "Update an existing book",
    "description": "Update the details of a book identified by its ID.",
    "parameters": [
      {
        "name": "bookId",
        "in": "path",
        "required": true,
        "description": "The ID of the book to update",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "description": "The updated book object",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/Book"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Book updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Book"
            }
          }
        }
      },
      "400": {
        "description": "Invalid input, object invalid"
      },
      "404": {
        "description": "Book not found"
      },
      "500": {
        "description": "Internal server error"
      }
    }
  }
},
    "/reservations": {
      "get": {
        "description": "Retrieve all current reservations or filter by UserID.",
        "parameters": [
          {
            "name": "UserID",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "example": "2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Reservation" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Create a new Reservation",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ReservationID": {
                  "example": "any number"
                },
                "BookID": {
                  "example": "any number"
                },
                "ReservationDate": {
                  "example": "any"
                },
                "UserID": {
                  "example": "any number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservations/{reservationId}": {
      "get": {
        "description": "Retrieve one reservation by its reservation id.",
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Reservation" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Must use a valid reservation id to find a reservation."
          },
          "404": {
            "description": "Not Found - No reservation exists with that id."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/reservation/update/{resrvationId}": {
  "put": {
    "summary": "Update an existing reservation",
    "description": "Update the details of a reservation identified by its reservation ID.",
    "parameters": [
      {
        "name": "reservationId",
        "in": "path",
        "required": true,
        "description": "The ID of the reservation to update",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "description": "The updated reservation object",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/Reservation"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Reservation updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Reservation"
            }
          }
        }
      },
      "400": {
        "description": "Invalid input, object invalid"
      },
      "404": {
        "description": "Reservation not found"
      },
      "500": {
        "description": "Internal server error"
      }
    }
  }
},
    "/loans": {
      "get": {
        "description": "Retrieve all current loans or filter by either UserID or BookID.",
        "parameters": [
          {
            "name": "UserID",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "example": "2"
            }
          },
          {
            "name": "BookID",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "example": "2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Loan" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Create a new Loan",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "LoanID": {
                  "example": "any Number"
                },
                "BookID": {
                  "example": "any Number"
                },
                "DateOut": {
                  "example": "any"
                },
                "DueDate": {
                  "example": "any"
                },
                "UserID": {
                  "example": "any Number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/loans/{loanId}": {
      "get": {
        "description": "Retrieve one loan by its loan id.",
        "parameters": [
          {
            "name": "LoanID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Loan" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Must use a valid loan id to find a loan."
          },
          "404": {
            "description": "Not Found - No loan exists with that id."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/loan/update/{loadId}": {
  "put": {
    "summary": "Update an existing loan.",
    "description": "Modify the details of a loan identified by its ID.",
    "parameters": [
      {
        "name": "loanId",
        "in": "path",
        "required": true,
        "description": "The ID of the loan to update.",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "description": "The updated loan object.",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/Loan"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Loan updated successfully.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Loan"
            }
          }
        }
      },
      "400": {
        "description": "Invalid input - Object is invalid."
      },
      "404": {
        "description": "Loan not found."
      },
      "500": {
        "description": "Internal server error"
      }
    }
  }
}

  }
}
